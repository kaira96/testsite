#ORM
#1 query set
>>> from news.models import News, Category
>>> News.objects.all()
>>> News.objects.order_by('pk')
>>> News.objects.order_by('-pk')
>>> News.objects.all()
>>> News.objects.all().reverse()
>>> News.objects.get(pk=1)
>>> News.objects.get(title='News 4')
>>> news4 = _
>>> news4
>>> news4.is_published
>>> news4.category
>>> news4.category.pk
>>> news4.category.title
>>> cat4 = Category.objects.get(pk=4)
>>> cat4
>>> cat4.title
>>> cat4.news_set.all()
>>> news = _
>>> news
>>> for item in news:
...     print(item.title, item.is_published)
...
>>> cat1 = Category.objects.get(pk=1)
>>> news = cat1.news_set.all()
>>> news
>>> news = cat1.get_news.all()
>>> news

#2 filters
>>> from news.models import News, Category
>>> News.objects.filter(pk__gt=12)
>>> News.objects.filter(pk__gte=12)
>>> News.objects.filter(title__contains='new')
>>> News.objects.filter(title__icontains='new')
>>> News.objects.filter(title__icontains='Новость')
>>> News.objects.filter(title__contains='Новость')
>>> News.objects.filter(title__contains='новость')
>>> News.objects.filter(pk__in=[9, 10, 11])
>>> News.objects.filter(pk__in=[9, 10, 11], title__contains='Новость')

#3 methods
>>> News.objects.first()
>>> News.objects.order_by('pk').first()
>>> News.objects.order_by('-pk').first()
>>> cat1 = Category.objects.get(pk=1)
>>> news = cat1.news_set.all()
>>> news
>>> news = cat1.news_set.filter(pk__gt=1)
>>> news
>>> news = cat1.news_set.filter(pk__gt=1).first()
>>> news
>>> News.objects.last()
>>> News.objects.earliest('updated_at')
>>> News.objects.latest('updated_at')
>>> cats = Category.objects.filter(pk__in=[1, 3])
>>> cats
>>> News.objects.filter(category__in=cats)
>>> cat1 = Category.objects.get(pk=1)
>>> cat5 = Category.objects.get(pk=5)
>>> cat1.news_set.exists()
>>> cat5.news_set.exists()
>>> cat1.news_set.count()
>>> News.objects.count()
>>> news = News.objects.get(pk=5)
>>> news
>>> news.get_previous_by_created_at()
>>> news.get_next_by_created_at()
>>> news.get_next_by_created_at(pk__gt=10)
>>> news.get_next_by_created_at(pk__gt=10, title__contains=6)

#4 class q фильтрация по значению полей связвнных записей
>>> News.objects.filter(category__title='Политика')
>>> Category.objects.filter(news__title__contains='Новость из формы')
>>> Category.objects.filter(news__title__contains='Новость из формы').count()
>>> Category.objects.filter(news__title__contains='Новость из формы').distinct()
>>> News.objects.filter(pk__in=[5, 6], title__contains='2')
>>> News.objects.filter(Q(pk__in=[3, 4]) | Q(title__contains='2'))
>>> News.objects.filter(Q(pk__in=[3, 4]) | Q(title__contains='2') & ~Q(pk__lt=4))

#5 Лимитирование количества записей, агригатные функции
>>> from news.models import *
>>> News.objects.all()
>>> News.objects.all()[:3]
>>> News.objects.all()[10:]
>>> News.objects.all()[3:5]
>>> from django.db.models import *
>>> News.objects.aggregate(Min('id'), Max('id'))
>>> News.objects.aggregate(min_views=Min('id'), max_views=Max('id'))
>>> News.objects.aggregate(diff=Min('id') -Max('id'))
>>> News.objects.aggregate(Sum('id'))
>>> News.objects.aggregate(Avg('id'))
>>> News.objects.aggregate(Count('id'))

#6 Метод annotate
>>> cats = Category.objects.annotate(Count('news'))
>>> cats
>>> for item in cats:
...     print(item.title, item.news__count)
...
>>> cats = Category.objects.annotate(cnt=Count('news'))
>>> for item in cats:
...     print(item.title, item.cnt)
...
>>> cats = Category.objects.annotate(max_views=Max('news__id'))
>>> for item in cats:
...     print(item.title, item.max_views)
...
>>> cats = Category.objects.annotate(sum_views=Sum('news__id'))
>>> for item in cats:
...     print(item.title, item.sum_views)
...
>>> cats = Category.objects.annotate(cnt=Count('news')).filter(cnt__gt=0)
>>> for item in cats:
...     print(item.title, item.cnt)
...
# Меняем верстку list_categories.html
>>> News.objects.aggregate(cnt=Count('id'))
>>> News.objects.aggregate(cnt=Count('id', distinct=True))

#7 class F метод values
>>> news1 = News.objects.values('title', 'views').get(pk=1)
>>> news1['title']
>>> from django.db import connection
>>> news = News.objects.values('title', 'views', 'category__title')
>>> connection.queries
>>> from django.db import reset_queries
>>> reset_queries
>>> reset_queries()
>>> connection.queries
>>> news = News.objects.values('title', 'views', 'category__title')
>>> connection.queries
>>> for item in news:
...     print(item['title'], item['category__title'])
...
>>> connection.queries
>>> from django.db.models import F
>>> news1 = News.objects.get(pk=1)
>>> news1.id
>>> news1.id += 1
>>> news1.save()
>>> news = News.objects.get(pk=1)
>>> news.id
>>> news.id = F('views') + 1
>>> news.save()
>>> News.objects.filter(content__icontains=F('title'))
>>> from django.db.models.functions import Length
>>> news = News.objects.annotate(lenght=Length('title')).all()
>>> for item in news:
...     print(item.title, item.lenght)
...

#8 raw sql "чистый sql"
>>> from news.models import *
>>> News.objects.raw("SELECT * FROM news_news")
>>> news = _
>>> for item in news:
...     print(item.title, item.pk, item.is_published)
...
>>> news = News.objects.raw("SELECT id, title FROM news_news")
>>> for item in news:
...     print(item.title)
...
>>> for item in news:
...     print(item.title, item.is_published)
...
>>> news = News.objects.raw("SELECT * FROM news_news WHERE title = 'News 4'")
>>> news
>>> for item in news:
...     print(item.title)
...
>>> news = News.objects.raw("SELECT * FROM news_news WHERE title = %s", ['News 4'])
>>> for item in news:
...     print(item.title)
...






#pip install django-debug-toolbar
